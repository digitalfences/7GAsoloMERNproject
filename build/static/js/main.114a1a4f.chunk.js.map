{"version":3,"sources":["components/NavBar.js","components/Home.js","components/Edit.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","AppBar","position","Typography","variant","color","Button","component","Link","to","Home","props","state","path","observations","requestString","update","logState","console","log","getObservations","a","fetch","response","json","observationsArray","setState","onChange","event","target","value","onSubmit","preventDefault","bind","this","array","map","observation","observationNum","SNo","key","ObservationDate","ProvinceState","CountryRegion","LastUpdate","Confirmed","Deaths","Recovered","className","width","TextField","fullWidth","id","defaultValue","disabled","helperText","type","Box","height","whitespace","overflow","bgcolor","Component","Edit","body","bodyHandler","create","JSON","parse","method","headers","then","res","delete","style","margin","label","multiline","rows","placeholder","App","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.114a1a4f.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from 'react-router-dom';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport ToolBar from \"@material-ui/core/ToolBar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\n\nconst NavBar = () => {\n    return (\n        <div>\n            <AppBar position=\"static\">\n                <ToolBar>\n                    <Typography variant = \"h3\" color=\"inherit\">\n                        <Button component={Link} to='/'>Covid API</Button>\n                    </Typography>\n                </ToolBar>\n            </AppBar>\n        </div>\n    )\n}\nexport default NavBar;","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport './Home.css';\n\nclass Home extends Component {\n    state = {\n        path: \"https://pure-citadel-56709.herokuapp.com/\",\n        observations: null,\n        requestString: \"\",\n        update: true\n    }\n    constructor(props) {\n        super(props)\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    componentDidMount() {\n    }\n    shouldComponentUpdate(){\n        return this.state.update;\n    }\n    logState = () => console.log(this.state);\n\n    getObservations = async () => {\n        const response = await fetch(this.state.path)\n        const observationsArray = await response.json();\n        this.setState({\n            observations: observationsArray\n        }, this.logState);    \n    }\n    onChange = (event) => {\n        this.setState({\n            update: false,\n            requestString: event.target.value\n        })\n    }\n    onSubmit = (event) => {\n        event.preventDefault();\n        this.setState({\n            observations: null,\n            path: \"https://pure-citadel-56709.herokuapp.com/\" + this.state.requestString,\n            update: true\n        })\n    }\n    render() {\n        let array;\n        if (!this.state.observations){\n            array = <p className=\"loader\">&nbsp;&nbsp;&nbsp;&nbsp;Loading...</p>;\n            this.getObservations();\n        }\n        else {\n            array = this.state.observations.map((observation,observationNum) => {\n               observationNum = observation.SNo\n               return(<div key={observationNum}>\n                    <p>&nbsp;&nbsp;[</p>\n                    <p>&nbsp;&nbsp;&nbsp;&nbsp;Serial:&nbsp;&nbsp;{observation.SNo} </p>\n                    <p>&nbsp;&nbsp;&nbsp;&nbsp;Observation Date:&nbsp;&nbsp;{observation.ObservationDate}</p>\n                    <p>&nbsp;&nbsp;&nbsp;&nbsp;Province or State:&nbsp;&nbsp;{observation.ProvinceState}</p>\n                    <p>&nbsp;&nbsp;&nbsp;&nbsp;Country or Region:&nbsp;&nbsp;{observation.CountryRegion}</p>\n                    <p>&nbsp;&nbsp;&nbsp;&nbsp;Last Update:&nbsp;&nbsp;{observation.LastUpdate}</p>\n                    <p>&nbsp;&nbsp;&nbsp;&nbsp;Confirmed Cases:&nbsp;&nbsp;{observation.Confirmed}</p>\n                    <p>&nbsp;&nbsp;&nbsp;&nbsp;Dead:&nbsp;&nbsp;{observation.Deaths}</p>\n                    <p>&nbsp;&nbsp;&nbsp;&nbsp;Recovered:&nbsp;&nbsp;{observation.Recovered}</p>\n                    <p>&nbsp;&nbsp;]</p>\n                </div>)\n            })\n        }\n        return (\n            <div className=\"home\">\n                <div className='requestTypeButtons'>\n                        <Button component={Link} to=\"/\">Read</Button>\n                        <Button component={Link} to=\"/edit/create\">Create</Button>\n                        <Button component={Link} to='/edit/update'>Update</Button>\n                        <Button component={Link} to='/edit/delete'>Delete</Button>\n                </div>\n                <form onSubmit={this.onSubmit} className=\"apiTextField\" width=\"50vw\">\n                    \n                    <div className=\"fieldContainer\">\n                    <div className=\"filled-basic\">\n                    <TextField fullWidth id=\"filled-basic\" variant=\"filled\" defaultValue={this.state.path} disabled></TextField>\n                    </div>\n                    <div className=\"outlined-basic\">\n                        <TextField fullWidth id=\"outline-basic\" variant=\"outlined\" helperText=\"Please enter an API request here\" onChange={this.onChange}></TextField>\n                    </div>\n                    </div>\n                    <div className=\"buttonContainer\">\n                        <Button id=\"buttonSubmit\" type=\"submit\" variant=\"contained\" fullWidth>Submit</Button>\n                    </div>\n                    \n                </form>\n                <Typography component=\"div\" variant=\"body1\">\n                    <Box width=\"50vw\" height=\"400px\" component=\"div\" whitespace=\"normal\" overflow=\"auto\" bgcolor=\"rgba(0,180,255,0.5)\">\n                        {array}\n                    </Box>\n                </Typography>\n\n            </div>)\n    }\n}\nexport default Home\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport \"./Edit.css\";\n\nclass Edit extends Component {\n    state = {\n        path: \"https://pure-citadel-56709.herokuapp.com/\",\n        requestString: \"\",\n        body: \"\"\n    }\n    constructor(props) {\n        super(props)\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onChange = (event) => {\n        this.setState({\n            requestString: event.target.value\n        })\n    }\n    bodyHandler = (event) => {\n        this.setState({\n            body: `${event.target.value}`\n        })\n    }\n    create = async () => {\n        console.log('creating');\n        console.log(this.state.body);\n        console.log(JSON.parse(this.state.body));\n        fetch('https://pure-citadel-56709.herokuapp.com/', {\n            method: 'POST',\n            body: this.state.body,\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }).then(res => res.json()).then(res => console.log(res))\n    }\n    update = async () => {\n        console.log('updating');\n        fetch(this.state.path, {\n            method: 'PUT',\n            body: this.state.body,\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }).then(res => res.json()).then(res => console.log(res))\n    }\n    delete = async () => {\n        console.log('deleting');\n        fetch(this.state.path, {\n            method: 'DELETE',\n            body: this.state.body,\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }).then(res => res.json()).then(res => console.log(res))\n    }\n    //{\"SNo\": 100000, \"ObservationDate\": \"01/02/2020\",\"ProvinceState\": \"GalenLand\",\"CountryRegion\": \"GalenTopia\", \"LastUpdate\": \"2020-04-14 23:41:11\",\"Confirmed\": 1000, \"Deaths\": 500,\"Recovered\": 500}\n    onSubmit = (event) => {\n        event.preventDefault();\n        this.setState({\n            path: \"https://pure-citadel-56709.herokuapp.com/\" + this.state.requestString,\n        })\n        if (this.props.create) {\n            this.create()\n        }\n        else if (this.props.update) {\n            this.update();\n        }\n        else if (this.props.delete) {\n            this.delete();\n        }\n        else {\n            console.log(\"error\");\n        }\n    }\n    render() {\n        return (\n            <div className=\"edit\">\n                <div className='requestTypeButtons'>\n                    <Button component={Link} to=\"/\">Read</Button>\n                    <Button component={Link} to=\"/edit/create\">Create</Button>\n                    <Button component={Link} to='/edit/update'>Update</Button>\n                    <Button component={Link} to='/edit/delete'>Delete</Button>\n                </div>\n                <form onSubmit={this.onSubmit} className=\"apiTextField\" width=\"50vw\">\n\n                    <div className=\"fieldContainer\">\n                        <div className=\"filled-basic\">\n                            <TextField fullWidth id=\"filled-basic\" variant=\"filled\" defaultValue={this.state.path} disabled></TextField>\n                        </div>\n                        <div className=\"outlined-basic\">\n                            <TextField fullWidth id=\"outline-basic\" variant=\"outlined\" helperText=\"Please enter an API request here\" onChange={this.onChange}></TextField>\n                        </div>\n                    </div>\n                    <div className=\"buttonContainer\">\n                        <Button id=\"buttonSubmit\" type=\"submit\" variant=\"contained\" fullWidth>Submit</Button>\n                    </div>\n\n                </form>\n                <Typography component=\"div\" variant=\"body1\">\n                    <Box width=\"50vw\" height=\"400px\" component=\"div\" whitespace=\"normal\" overflow=\"auto\" bgcolor=\"rgba(0,180,255,0.5)\">\n                        <TextField\n                            onChange={this.bodyHandler}\n                            fullWidth\n                            style={{ margin: '2.5%' }}\n                            id=\"request-form\"\n                            label=\"Request Body\"\n                            multiline\n                            rows={20}\n                            placeholder=\"{SNo: Number,\n                              ObservationDate: String,\n                              ProvinceState: String,\n                              CountryRegion: String,\n                              LastUpdate: String,\n                              Confirmed: Number,\n                              Deaths: Number,\n                              Recovered: Number;}\"\n                            variant=\"outlined\"\n                        ></TextField>/>\n                    </Box>\n\n                </Typography>\n            </div>)\n    }\n}\nexport default Edit","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport Home from './components/Home';\nimport Edit from './components/Edit';\nimport { Link, Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nclass App extends Component {\n\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <nav>\n            <NavBar>\n            </NavBar>\n          </nav>\n      <main>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/edit/create\"> \n            <Edit create/>\n          </Route>\n          <Route exact path=\"/edit/update\"> \n            <Edit update/>\n          </Route>\n          <Route exact path=\"/edit/delete\"> \n            <Edit delete/>\n          </Route>\n        </Switch>\n      </main>\n      <footer>\n          By Galen Emanuel 2020\n      </footer>\n    </div>\n  </Router >)\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}